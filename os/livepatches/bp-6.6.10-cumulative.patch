diff --git a/arch/x86/kernel/cpu/proc.c b/arch/x86/kernel/cpu/proc.c
index fc464002ac0e..7da434b36ec9 100644
--- a/arch/x86/kernel/cpu/proc.c
+++ b/arch/x86/kernel/cpu/proc.c
@@ -209,7 +209,7 @@ static void *c_start(struct seq_file *m, loff_t *pos)
 {
 	struct cpumask fake_mask;
 
-	if (fake_cpumask(current, &fake_mask)) {
+	if (fake_online_cpumask(current, &fake_mask)) {
 		*pos = cpumask_next(*pos - 1, &fake_mask);
 		if ((*pos) < online_cpus_in_cpu_cgroup(current))
 			return &cpu_data(*pos);
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index f97bf2425430..b6952c7af460 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -218,7 +218,7 @@ static ssize_t show_cpus_attr(struct device *dev,
 {
 	struct cpu_attr *ca = container_of(attr, struct cpu_attr, attr);
 	struct cpumask mask;
-	if (fake_cpumask(current, &mask))
+	if (fake_online_cpumask(current, &mask))
 		return cpumap_print_to_pagebuf(true, buf, &mask);
 	return cpumap_print_to_pagebuf(true, buf, ca->map);
 }
diff --git a/fs/kernfs/dir.c b/fs/kernfs/dir.c
index f68f00509d0f..8ea2f6f0de36 100644
--- a/fs/kernfs/dir.c
+++ b/fs/kernfs/dir.c
@@ -1865,7 +1865,7 @@ static int kernfs_fop_readdir(struct file *file, struct dir_context *ctx)
 			int id = 0;
 			struct cpumask cpu_fake_mask;
 
-			if (!fake_cpumask(current, &cpu_fake_mask))
+			if (!fake_online_cpumask(current, &cpu_fake_mask))
 				goto orig;
 			sscanf(name, "cpu%d", &id);
 			if (!cpumask_test_cpu(id, &cpu_fake_mask))
diff --git a/fs/proc/stat.c b/fs/proc/stat.c
index 60cad981552a..f0614c0a1de9 100644
--- a/fs/proc/stat.c
+++ b/fs/proc/stat.c
@@ -134,7 +134,7 @@ static int show_stat(struct seq_file *p, void *v)
 
 fake_readout:
 	fake = 1;
-	uptime = ktime_get_ns();
+	uptime = ktime_get_boottime_ns();
 	fake_cputime_readout(current, uptime, &user, &system, &cpus);
 	idle = (uptime * cpus) - user - system;
 
@@ -151,7 +151,7 @@ static int show_stat(struct seq_file *p, void *v)
 	seq_put_decimal_ull(p, " ", nsec_to_clock_t(guest_nice));
 	seq_putc(p, '\n');
 
-	if (fake && fake_cpumask(current, &cpu_fake_mask))
+	if (fake && fake_online_cpumask(current, &cpu_fake_mask))
 		goto fake_online_cpus;
 
 	for_each_online_cpu(i) {
diff --git a/include/linux/vpsadminos.h b/include/linux/vpsadminos.h
index 41726c060289..b2100802094f 100644
--- a/include/linux/vpsadminos.h
+++ b/include/linux/vpsadminos.h
@@ -26,8 +26,9 @@ extern int online_cpus_in_cpu_cgroup(struct task_struct *p);
 void fake_cputime_readout(struct task_struct *p, u64 timestamp, u64 *user, u64 *system, int *cpus);
 u64 fake_cputime_readout_idle(struct timespec64 *uptime, struct task_struct *p);
 void fake_cputime_readout_percpu(struct task_struct *p, int cpu, u64 *user, u64 *system);
-extern void set_fake_cpumask(struct task_struct *p, const struct cpumask *srcmask);
-extern int fake_cpumask(struct task_struct *p, struct cpumask *dstmask);
+extern void set_fake_affinity_cpumask(struct task_struct *p, const struct cpumask *srcmask);
+extern int fake_affinity_cpumask(struct task_struct *p, struct cpumask *dstmask);
+extern int fake_online_cpumask(struct task_struct *p, struct cpumask *dstmask);
 
 struct proc_dir_entry;
 extern struct proc_dir_entry *proc_vpsadminos;
diff --git a/kernel/cgroup/cpuset.c b/kernel/cgroup/cpuset.c
index ade38ef833da..5e5705aa5be3 100644
--- a/kernel/cgroup/cpuset.c
+++ b/kernel/cgroup/cpuset.c
@@ -2928,7 +2928,7 @@ static int cpuset_common_seq_show(struct seq_file *sf, void *v)
 	cpumask_t fake_mask;
 
 	if (current->nsproxy->cgroup_ns != &init_cgroup_ns) {
-		if (!fake_cpumask(current, &fake_mask))
+		if (!fake_online_cpumask(current, &fake_mask))
 			goto orig;
 		switch (type) {
 		case FILE_CPULIST:
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index e6c848b0479e..0195103e2df3 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -65,7 +65,6 @@
 #include <linux/wait_api.h>
 #include <linux/workqueue_api.h>
 #include <linux/user_namespace.h>
-
 #include <linux/vpsadminos.h>
 
 #ifdef CONFIG_PREEMPT_DYNAMIC
@@ -8399,7 +8398,7 @@ long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)
 
 	if (current->nsproxy->cgroup_ns != &init_cgroup_ns) {
 		struct cpumask fake_mask;
-		if (!fake_cpumask(p, &fake_mask))
+		if (!fake_online_cpumask(p, &fake_mask))
 			goto orig;
 		if (!check_same_owner(p)) {
 			rcu_read_lock();
@@ -8415,7 +8414,7 @@ long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)
 			goto out_put_task;
 		}
 		retval = 0;
-		set_fake_cpumask(p, in_mask);
+		set_fake_affinity_cpumask(p, in_mask);
 		goto out_put_task;
 	}
 orig:
@@ -8518,7 +8517,7 @@ long sched_getaffinity(pid_t pid, struct cpumask *mask)
 
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
 	cpumask_and(mask, &p->cpus_mask, cpu_active_mask);
-	fake_cpumask(p, mask);
+	fake_affinity_cpumask(p, mask);
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 
 out_unlock:
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 6c4ce9963b30..cbf68fc1f678 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -3539,4 +3539,4 @@ void cpustat_fake_readout(struct cgroup_subsys_state *css, int cpu,
 void cpustat_fake_readout_percpu(struct cgroup_subsys_state *css,
 					  int cpu, u64 *user, u64 *system);
 void cpustat_fake_write(struct cgroup_subsys_state *css, int cpu,
-				 u64 user, u64 system);
\ No newline at end of file
+				 u64 user, u64 system);
diff --git a/kernel/vpsadminos.c b/kernel/vpsadminos.c
index afe9bc20ae1c..9d39c40fb0d5 100644
--- a/kernel/vpsadminos.c
+++ b/kernel/vpsadminos.c
@@ -10,6 +10,26 @@
 #include <asm/page.h>
 #include <linux/sched/cputime.h>
 #include "sched/sched.h"
+#include <linux/utsname.h>
+#include <linux/vpsadminos-livepatch.h>
+#include "kpatch-macros.h"
+char old_uname[65];
+char new_uname[65];
+
+static int patch(patch_object *obj)
+{
+	scnprintf(new_uname, 64, "%s.%s", LIVEPATCH_ORIG_KERNEL_VERSION,
+	    LIVEPATCH_NAME);
+	scnprintf(old_uname, 64, "%s", init_uts_ns.name.release);
+	scnprintf(init_uts_ns.name.release, 64, "%s", new_uname);
+	return 0;
+}
+KPATCH_PRE_PATCH_CALLBACK(patch);
+static void unpatch(patch_object *obj)
+{
+	scnprintf(init_uts_ns.name.release, 64, "%s", old_uname);
+}
+KPATCH_POST_UNPATCH_CALLBACK(unpatch);
 
 struct proc_dir_entry *proc_vpsadminos;
 
@@ -60,7 +80,7 @@ int online_cpus_in_cpu_cgroup(struct task_struct *p)
 }
 
 // Caller's responsibility to make sure p lives throughout
-void set_fake_cpumask(struct task_struct *p, const struct cpumask *srcmask)
+void set_fake_affinity_cpumask(struct task_struct *p, const struct cpumask *srcmask)
 {
 	if (!online_cpus_in_cpu_cgroup(p))
 		return;
@@ -69,15 +89,20 @@ void set_fake_cpumask(struct task_struct *p, const struct cpumask *srcmask)
 }
 
 // Caller's responsibility to make sure p lives throughout
-int fake_cpumask(struct task_struct *p, struct cpumask *dstmask)
+int fake_affinity_cpumask(struct task_struct *p, struct cpumask *dstmask)
 {
-	int cpus;
-	int cpu, enabled;
-
 	if (p->set_fake_cpu_mask) {
 		cpumask_copy(dstmask, &p->fake_cpu_mask);
 		return 1;
 	}
+	return 0;
+}
+
+// Caller's responsibility to make sure p lives throughout
+int fake_online_cpumask(struct task_struct *p, struct cpumask *dstmask)
+{
+	int cpus;
+	int cpu, enabled;
 
 	cpus = online_cpus_in_cpu_cgroup(p);
 	if (!cpus)
@@ -122,7 +147,7 @@ void fake_cputime_readout_v1(struct task_struct *p, u64 timestamp, u64 *user, u6
 	*user = usr;
 	*system = sys;
 	*cpus = online_cpus_in_cpu_cgroup(p);
-	fake_cpumask(p, &cpu_fake_mask);
+	fake_online_cpumask(p, &cpu_fake_mask);
 
 	user_time = usr - usr_old;
 	system_time = sys - sys_old;
@@ -184,7 +209,7 @@ void fake_cputime_readout_v2(struct task_struct *p, u64 timestamp, u64 *user, u6
 	*user = usr;
 	*system = sys;
 	*cpus = online_cpus_in_cpu_cgroup(p);
-	fake_cpumask(p, &cpu_fake_mask);
+	fake_online_cpumask(p, &cpu_fake_mask);
 
 	user_time = usr - usr_old;
 	system_time = sys - sys_old;
